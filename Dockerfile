# Multi-stage build para otimizar tamanho da imagem
FROM node:18-alpine AS builder

# Definir diret√≥rio de trabalho
WORKDIR /app

# Argumentos para vari√°veis de ambiente em build time
ARG VITE_SUPABASE_URL
ARG VITE_SUPABASE_ANON_KEY

# Definir as vari√°veis de ambiente para o build
ENV VITE_SUPABASE_URL=$VITE_SUPABASE_URL
ENV VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY

# Debug: verificar se as vari√°veis foram passadas corretamente
RUN echo "üîç Verificando vari√°veis de ambiente durante build:" && \
    echo "VITE_SUPABASE_URL: $VITE_SUPABASE_URL" && \
    echo "VITE_SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY:0:10}..." && \
    if [ -z "$VITE_SUPABASE_URL" ]; then echo "‚ùå VITE_SUPABASE_URL est√° vazia"; exit 1; fi && \
    if [ -z "$VITE_SUPABASE_ANON_KEY" ]; then echo "‚ùå VITE_SUPABASE_ANON_KEY est√° vazia"; exit 1; fi && \
    echo "‚úÖ Vari√°veis de ambiente OK"

# Copiar arquivos de depend√™ncia
COPY package*.json ./

# Instalar depend√™ncias (incluindo devDependencies para build)
RUN npm ci && npm cache clean --force

# Copiar c√≥digo fonte
COPY . .

# Build da aplica√ß√£o
RUN npm run build

# Est√°gio de produ√ß√£o
FROM nginx:alpine

# Copiar arquivos buildados
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configura√ß√£o do nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Expor porta 80
EXPOSE 80

# Comando para iniciar nginx
CMD ["nginx", "-g", "daemon off;"]