#!/bin/bash

# Script de deploy Docker com versionamento autom√°tico
echo "üê≥ Iniciando processo de deploy Docker..."

# Vari√°veis de configura√ß√£o
IMAGE_NAME="extermina_frango"
DOCKER_USERNAME="zxtheuxz"
DEFAULT_VERSION="1.0.0"
REPOSITORY_FULL="$DOCKER_USERNAME/$IMAGE_NAME"

# Obter vers√£o via par√¢metro ou usar padr√£o
VERSION=${1:-$DEFAULT_VERSION}

echo "üìã Configura√ß√£o do Deploy:"
echo "   üì¶ Imagem: $IMAGE_NAME"
echo "   üë§ Usuario: $DOCKER_USERNAME"
echo "   üè∑Ô∏è  Vers√£o: $VERSION"
echo "   üìç Reposit√≥rio: $REPOSITORY_FULL"

# Validar formato da vers√£o (sem√¢ntico: x.y.z)
if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "‚ùå Formato de vers√£o inv√°lido!"
    echo "üí° Use o formato sem√¢ntico: x.y.z (exemplo: 1.0.0, 1.2.3)"
    echo "üìñ Uso: ./docker-deploy.sh [vers√£o]"
    echo "   Exemplo: ./docker-deploy.sh 1.0.1"
    exit 1
fi

# Extrair major.minor para tag adicional
MAJOR_MINOR=$(echo $VERSION | cut -d. -f1-2)

echo "üè∑Ô∏è  Tags que ser√£o criadas:"
echo "   - $REPOSITORY_FULL:$VERSION (vers√£o espec√≠fica)"
echo "   - $REPOSITORY_FULL:$MAJOR_MINOR (major.minor)"
echo "   - $REPOSITORY_FULL:latest (sempre a mais recente)"

echo "üì¶ Fazendo build da imagem..."

# Ler vari√°veis do arquivo .env
if [ -f .env ]; then
    source .env
    echo "‚úÖ Vari√°veis carregadas do arquivo .env"
else
    echo "‚ùå Arquivo .env n√£o encontrado"
    echo "üí° Crie um arquivo .env com:"
    echo "   VITE_SUPABASE_URL=sua_url"
    echo "   VITE_SUPABASE_ANON_KEY=sua_chave"
    exit 1
fi

# Verificar se as vari√°veis est√£o definidas
echo "üîç Verificando vari√°veis de ambiente..."
if [ -z "$VITE_SUPABASE_URL" ]; then
    echo "‚ùå VITE_SUPABASE_URL n√£o est√° definida"
    exit 1
fi

if [ -z "$VITE_SUPABASE_ANON_KEY" ]; then
    echo "‚ùå VITE_SUPABASE_ANON_KEY n√£o est√° definida"
    exit 1
fi

echo "‚úÖ URL Supabase: $VITE_SUPABASE_URL"
echo "‚úÖ Chave Supabase: ${VITE_SUPABASE_ANON_KEY:0:10}..."

# Build com build args
echo "üî® Construindo imagem com vari√°veis de ambiente..."
docker build \
    --build-arg VITE_SUPABASE_URL="$VITE_SUPABASE_URL" \
    --build-arg VITE_SUPABASE_ANON_KEY="$VITE_SUPABASE_ANON_KEY" \
    -t $IMAGE_NAME:$VERSION .

if [ $? -eq 0 ]; then
    echo "‚úÖ Build conclu√≠do com sucesso!"
    
    echo "üè∑Ô∏è  Criando tags m√∫ltiplas..."
    # Tag vers√£o espec√≠fica
    docker tag $IMAGE_NAME:$VERSION $REPOSITORY_FULL:$VERSION
    echo "   ‚úÖ $REPOSITORY_FULL:$VERSION"
    
    # Tag major.minor
    docker tag $IMAGE_NAME:$VERSION $REPOSITORY_FULL:$MAJOR_MINOR
    echo "   ‚úÖ $REPOSITORY_FULL:$MAJOR_MINOR"
    
    # Tag latest
    docker tag $IMAGE_NAME:$VERSION $REPOSITORY_FULL:latest
    echo "   ‚úÖ $REPOSITORY_FULL:latest"
    
    echo "üîê Fazendo push para reposit√≥rio..."
    echo "üìç Reposit√≥rio: $REPOSITORY_FULL"
    echo "‚ö†Ô∏è  Certifique-se de estar logado: docker login"
    echo ""
    
    # Push de todas as tags
    echo "üì§ Enviando tag vers√£o espec√≠fica ($VERSION)..."
    docker push $REPOSITORY_FULL:$VERSION
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro no push da vers√£o $VERSION"
        exit 1
    fi
    
    echo "üì§ Enviando tag major.minor ($MAJOR_MINOR)..."
    docker push $REPOSITORY_FULL:$MAJOR_MINOR
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro no push da vers√£o $MAJOR_MINOR"
        exit 1
    fi
    
    echo "üì§ Enviando tag latest..."
    docker push $REPOSITORY_FULL:latest
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro no push da tag latest"
        exit 1
    fi
    
    echo ""
    echo "üéâ Deploy conclu√≠do com sucesso!"
    echo "üìã Imagens dispon√≠veis no Docker Hub:"
    echo "   - $REPOSITORY_FULL:$VERSION"
    echo "   - $REPOSITORY_FULL:$MAJOR_MINOR"
    echo "   - $REPOSITORY_FULL:latest"
    echo ""
    echo "üí° Para pr√≥ximas vers√µes, use:"
    echo "   ./docker-deploy.sh 1.0.1  # Pr√≥ximo patch"
    echo "   ./docker-deploy.sh 1.1.0  # Pr√≥ximo minor"
    echo "   ./docker-deploy.sh 2.0.0  # Pr√≥ximo major"
    
    echo ""
    echo "üß™ Para testar localmente:"
    echo "   docker run -p 3000:80 $REPOSITORY_FULL:$VERSION"
    echo "   Depois acesse: http://localhost:3000"
    echo ""
    echo "üöÄ Para produ√ß√£o:"
    echo "   docker run -d -p 80:80 --name extermina-frango-app --restart unless-stopped $REPOSITORY_FULL:$VERSION"
    echo ""
    echo "üìã Para uso em produ√ß√£o (EasyPanel, etc):"
    echo "   - Registry: docker.io"
    echo "   - Repository: $REPOSITORY_FULL"
    echo "   - Tag: $VERSION (ou latest)"
    echo "   - Username: $DOCKER_USERNAME"
    echo "   - Password: [sua senha do Docker Hub]"
    
else
    echo "‚ùå Erro no build da imagem"
    exit 1
fi
